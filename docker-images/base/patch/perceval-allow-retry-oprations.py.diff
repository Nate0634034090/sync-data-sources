diff --git a/perceval/backends/core/git.py b/perceval/backends/core/git.py
index 01a3eb3..07f32c4 100644
--- a/perceval/backends/core/git.py
+++ b/perceval/backends/core/git.py
@@ -43,7 +43,7 @@ from ...backend import (Backend,
                         BackendCommand,
                         BackendCommandArgumentParser)
 from ...errors import RepositoryError, ParseError
-from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME, GitLOC
+from ...utils import DEFAULT_DATETIME, DEFAULT_LAST_DATETIME, GitLOC, retry
 from ...log_events import get_smtp_handler, SDSSMTPHandler
 
 CATEGORY_COMMIT = 'commit'
@@ -850,6 +850,7 @@ class GitRepository:
         }
 
     @classmethod
+    @retry(logger=True, exception=RepositoryError)
     def clone(cls, uri, dirpath):
         """Clone a Git repository.
 
@@ -944,6 +945,7 @@ class GitRepository:
         """
         return self.count_objects() == 0
 
+    @retry(logger=True, exception=RepositoryError)
     def update(self):
         """Update repository from its remote.
 
diff --git a/perceval/utils.py b/perceval/utils.py
index 4cea080..0eba92e 100644
--- a/perceval/utils.py
+++ b/perceval/utils.py
@@ -284,6 +284,77 @@ def xml_to_dict(raw_xml):
     return d
 
 
+def retry(func=None, exception=Exception, n_tries=3, delay=5, backoff=1, logger=False):
+    """
+    Thanks To: https://stackoverflow.com/questions/42521549/retry-function-in-python
+
+    Retry decorator with exponential backoff.
+
+    Parameters
+    ----------
+    func : typing.Callable, optional
+        Callable on which the decorator is applied, by default None
+    exception : Exception or tuple of Exceptions, optional
+        Exception(s) that invoke retry, by default Exception
+    n_tries : int, optional
+        Number of tries before giving up, by default 5
+    delay : int, optional
+        Initial delay between retries in seconds, by default 5
+    backoff : int, optional
+        Backoff multiplier e.g. value of 2 will double the delay, by default 1
+    logger : bool, optional
+        Option to log or print, by default False
+
+    Returns
+    -------
+    typing.Callable
+        Decorated callable that calls itself when exception(s) occur.
+
+    Examples
+    --------
+    >>> import random
+    >>> @retry(exception=Exception, n_tries=4)
+    ... def test_random(text):
+    ...    x = random.random()
+    ...    if x < 0.5:
+    ...        raise Exception("Fail")
+    ...    else:
+    ...        print("Success: ", text)
+    >>> test_random("It works!")
+    """
+
+    if func is None:
+        return partial(
+            retry,
+            exception=exception,
+            n_tries=n_tries,
+            delay=delay,
+            backoff=backoff,
+            logger=logger,
+        )
+
+    @wraps(func)
+    def wrapper(*args, **kwargs):
+        ntries, ndelay = n_tries, delay
+
+        while ntries > 1:
+            try:
+                return func(*args, **kwargs)
+            except exception as e:
+                msg = f"{str(e)}, Retrying in {ndelay} seconds..."
+                if logger:
+                    logging.error(msg)
+                else:
+                    logger.error(msg)
+                time.sleep(ndelay)
+                ntries -= 1
+                ndelay *= backoff
+
+        return func(*args, **kwargs)
+
+    return wrapper
+
+
 class GitLOC:
 
     def __init__(self, url):
@@ -533,6 +604,7 @@ class GitLOC:
 
         return extract_lines_of_code(self.sanitize_os_output(result))
 
+    @retry(logger=True, exception=RepositoryError)
     def _clone(self):
         """
         Clone a Git repository.
@@ -581,6 +653,7 @@ class GitLOC:
             logger.error('Git clone error %s', str(cle), exc_info=True)
             raise cle
 
+    @retry(logger=True, exception=RepositoryError)
     def _pull(self):
         os.chdir(os.path.abspath(self.repo_path))
         env = {
@@ -633,6 +706,7 @@ class GitLOC:
 
         return status
 
+    @retry(logger=True, exception=RepositoryError)
     def _fetch(self):
         os.chdir(os.path.abspath(self.repo_path))
 
